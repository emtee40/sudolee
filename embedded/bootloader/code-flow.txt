
== code ==
1, 入口地址
	-
		_start: b   start_code
				ldr pc, _undefined_instruction
				ldr pc, _software_interrupt
				ldr pc, _prefetch_abort
				ldr pc, _data_abort
				ldr pc, _not_used
				ldr pc, _irq
				ldr pc, _fiq

2, start_code
	- CPU复位后跳入0x00地址, 如下:
		start_code:
			/*
			 * set the cpu to SVC32 mode
			 */
			/* 把cpsr内容存入r0, 使用mrs指令(专用特权寄存器到寄存器的存取)
			 *CPSR当前程序状态寄存器格式如下:
			 * 31  30  29  28  27  26  25  24  23 ~ ~ 20  19 ~ 16   15 ~ 10    9   8   7   6   5    4    3    2    1    0
			 *___ ___ ___ ___ ___ ___ ___ ___  _ _ _ ___  _ _ _ _ _  _ _ _ _  __  __  ___ ___ ___ ____ ____ ____ ____ ____
			 *| N | Z | C | V | Q |  Res  | J | *  *  * | GE [3:0] | * * * * | E | A | I | F | T | M4 | M3 | M2 | M1 | M0 |
			 */
			mrs r0, cpsr
			bic r0, r0, #0x1f /* 0x~ ~ 0001 1111, M4~M0清零 */
			orr r0, r0, #0xd3 /* 0x~ ~ 1101 0011 */
			/* 操作后 r0=0x~ ~ 1101 0011
			 * I=1 禁止IRQ中断, F=1 禁止FIQ中断, T=0 工作在arm mode.
			 */ 
			msr cpsr, r0	  /* M4~M0=[10011] 表示处理器模式SVC32 */

			/* disable watchdog */
			ldr r0, =pWTCON
			mov r1, #0x0
			str r1, [r0]

			/* 设置所有中断mask, 默认也是全1 */
			mov r1, #0xffffffff
			ldr r0, =INTMSK
			str r1, [r0]
			str r1, [r0]

			/* 设置时钟
			 * FCLK:HCLK:PCLK = 1:2:4
			 * default FCLK is 120 MHz !
			 * DIVN_UPLL [3]-> 0: UCLK=UPLL, 1: UCLK=UPLL/2, note<UCLK must be 48MHZ>
			 * HDIVN   [2:1]-> 00: HCLK=FCLK, 01: HCLK=FCLK/2, 10: HCLK=FCLK/4 when CAMDIVN[9]=0, HCLK=FCLK/8 when CAMDIVN[9]=1
			 *				   11: HCLK=FCLK/3 when CAMDIVN[8]=0, HCLK=FCLK/6 when AMDIVN[8]=1
			 * PDIVN     [0]-> 0: PCLK=HCLK, 1: PCLK=HCLK/2
			 */
			ldr r0, =CLKDIVN
			mov r1, #3
			str r1, [r0]

			bl  cpu_init_crit

3, cpu_init_crit
	Note: 如果define了CONFIG_SKIP_LOWLEVEL_INIT就会调用cpu_init_crit(), 然后调用lowlevel_init()初始化内存.
		因为内存的配置是根据board决定的,所以由board/来定义.
		mini2440 没有使用.

    /*
     * flush v4 I/D caches
     */
    mov r0, #0
	/* 使I/D cache失效:将寄存器r0的数据传送到协处理器p15的c7中. C7寄存器位对应cp15中的cache控制寄存器 */
    mcr p15, 0, r0, c7, c7, 0   /* flush v3/v4 cache */
	/* 使TLB操作寄存器失效:将r0数据送到cp15的c8,c7中. C8对应TLB操作寄存器 */
    mcr p15, 0, r0, c8, c7, 0   /* flush v4 TLB */

    /*
     * disable MMU stuff and caches
     */
    mrc p15, 0, r0, c1, c0, 0
    bic r0, r0, #0x00002300 @ clear bits 13, 9:8 (--V- --RS)
    bic r0, r0, #0x00000087 @ clear bits 7, 2:0 (B--- -CAM)
    orr r0, r0, #0x00000002 @ set bit 2 (A) Align
    orr r0, r0, #0x00001000 @ set bit 12 (I) I-Cache
    mcr p15, 0, r0, c1, c0, 0

    /*
     * before relocating, we have to setup RAM timing
     * because memory timing is board-dependend, you will
     * find a lowlevel_init.S in your board directory.
     */
    mov ip, lr

    bl  lowlevel_init

    mov lr, ip
    mov pc, lr

4, lowlevel_init() -- smdk2410内存初始化, board/samsung/smdk2410/lowlevel_init.S

	_TEXT_BASE:
		.word   CONFIG_SYS_TEXT_BASE		/* =0x0 */

	.globl lowlevel_init
	lowlevel_init:
		/* memory control configuration */
		/* make r0 relative the current location so that it */
		/* reads SMRDATA out of FLASH rather than memory ! */
		ldr     r0, =SMRDATA
		ldr r1, _TEXT_BASE
		sub r0, r0, r1			/* U-boot从flash的0x0地址开始存放, r0是在flash中的地址, 而不是内存. */
		ldr r1, =BWSCON /* Bus Width Status Controller */
		add     r2, r0, #13*4
	0:
		ldr     r3, [r0], #4
		str     r3, [r1], #4		/* 用SMRDATA中数据, 逐个设置mem控制器. */
		cmp     r2, r0
		bne     0b  

		/* everything is fine now */
		mov pc, lr

		.ltorg  /* 随后是数据缓冲池 */
	SMRDATA:
		.word (0+(B1_BWSCON<<4)+(B2_BWSCON<<8)+(B3_BWSCON<<12)+(B4_BWSCON<<16)+(B5_BWSCON<<20)+(B6_BWSCON<<24)+(B7_BWSCON<<28))
		.word ((B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC))
		.word ((B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC))
		.word ((B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC))
		.word ((B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC))
		.word ((B4_Tacs<<13)+(B4_Tcos<<11)+(B4_Tacc<<8)+(B4_Tcoh<<6)+(B4_Tah<<4)+(B4_Tacp<<2)+(B4_PMC))
		.word ((B5_Tacs<<13)+(B5_Tcos<<11)+(B5_Tacc<<8)+(B5_Tcoh<<6)+(B5_Tah<<4)+(B5_Tacp<<2)+(B5_PMC))
		.word ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN))
		.word ((B7_MT<<15)+(B7_Trcd<<2)+(B7_SCAN))
		.word ((REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Trc<<18)+(Tchr<<16)+REFCNT)
		.word 0x32
		.word 0x30
		.word 0x30

5, u-boot/arch/arm/lib/board.c-> board_init_f().
/* Set stackpointer in internal RAM to call board_init_f */
call_board_init_f:
    ldr sp, =(CONFIG_SYS_INIT_SP_ADDR)
    bic sp, sp, #7 /* 8-byte alignment for ABI compliance */
    ldr r0,=0x00000000
    bl  board_init_f

6, board_init_f()
	- arch/arm/include/asm/global_data.h
		#define DECLARE_GLOBAL_DATA_PTR     register volatile gd_t *gd asm ("r8")
		DECLARE_GLOBAL_DATA_PTR在board里被使用.
		定义一个寄存器变量r8,用来存放gd的地址.

	- lib/asm-offsets.c-> DEFINE(GENERATED_GBL_DATA_SIZE, (sizeof(struct global_data) + 15) & ~15);





