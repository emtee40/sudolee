== fs.h ==
==
struct inode {
    umode_t         i_mode; /* file type + access permissions */
    unsigned short      i_opflags;
    kuid_t          i_uid; /* 文件所有者id */
    kgid_t          i_gid; /* 文件所有组id */
    unsigned int        i_flags;

#ifdef CONFIG_FS_POSIX_ACL
    struct posix_acl    *i_acl;
    struct posix_acl    *i_default_acl;
#endif

	/* 管理结构性的操作, 和文件相关的元数据(如:属性) */
    const struct inode_operations   *i_op;
    struct super_block  *i_sb;
    struct address_space    *i_mapping;

#ifdef CONFIG_SECURITY
    void            *i_security;
#endif

    /* Stat data, not accessed from path walking */
    unsigned long       i_ino; /* inode的唯一标示符.像fd是进程空间内,而i_ino是整个系统范围的 */
    /*
     * Filesystems may only read i_nlink directly.  They shall use the
     * following functions for modification:
     *
     *    (set|clear|inc|drop)_nlink
     *    inode_(inc|dec)_link_count
     */
    union {
        const unsigned int i_nlink; /* 持有该inode的硬链接数 */
        unsigned int __i_nlink;
    };
    dev_t           i_rdev; /* 要与之通讯的设备(如果是设备文件) */
    loff_t          i_size; /* file length in bytes */
    struct timespec     i_atime; /*最后访问时间(access)*/
    struct timespec     i_mtime; /*最后修改时间(modify)*/
    struct timespec     i_ctime; /*最后修改inode的时间*/
    spinlock_t      i_lock; /* i_blocks, i_bytes, maybe i_size */
    unsigned short          i_bytes;
    unsigned int        i_blkbits;
    blkcnt_t        i_blocks; /* file length in block (based on block size of given FS) */

#ifdef __NEED_I_SIZE_ORDERED
    seqcount_t      i_size_seqcount;                                                                                                                                    
#endif

    /* Misc */
    unsigned long       i_state;
    struct mutex        i_mutex;

    unsigned long       dirtied_when;   /* jiffies of first dirtying */

    struct hlist_node   i_hash; /* inode hash list */
    struct list_head    i_wb_list;  /* backing dev IO list */ /*等待回写?*/
    struct list_head    i_lru;      /* inode LRU list */
    struct list_head    i_sb_list; /* 表头为super_block->s_inodes的inode(all inodes)链表 */
    union {
        struct hlist_head   i_dentry;
        struct rcu_head     i_rcu;
    };
    u64         i_version;
    atomic_t        i_count; /* 持有该inode的进程数 */
    atomic_t        i_dio_count;
    atomic_t        i_writecount;
	/* 用于操作文件内的数据的方法的集合 */
    const struct file_operations    *i_fop; /* former ->i_op->default_file_ops */
    struct file_lock    *i_flock;
    struct address_space    i_data;
#ifdef CONFIG_QUOTA
    struct dquot        *i_dquot[MAXQUOTAS];
#endif
    struct list_head    i_devices; /* 块和字符设备用这个成员维护一个链表, 方便访问.
										p.s. chrdev在open的时候将自己的inode加入这个list, blkdev在open和lookup的时候 */
    union {
        struct pipe_inode_info  *i_pipe;
        struct block_device *i_bdev;
        struct cdev     *i_cdev;
    };

    __u32           i_generation;

#ifdef CONFIG_FSNOTIFY
    __u32           i_fsnotify_mask; /* all events this inode cares about */
    struct hlist_head   i_fsnotify_marks;
#endif

#ifdef CONFIG_IMA
    atomic_t        i_readcount; /* struct files open RO */
#endif
    void            *i_private; /* fs or device private pointer */
};


==
struct inode_operations {
    struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int); /* 根据文件系统对象的名称查找其inode(具体文件系统的)实例 */
    void * (*follow_link) (struct dentry *, struct nameidata *); /*根据符号链接(通常是软连接)查找其inode*/
    int (*permission) (struct inode *, int);
    struct posix_acl * (*get_acl)(struct inode *, int);

    int (*readlink) (struct dentry *, char __user *,int);
    void (*put_link) (struct dentry *, struct nameidata *, void *);

    int (*create) (struct inode *,struct dentry *, umode_t, bool);
    int (*link) (struct dentry *,struct inode *,struct dentry *); /* 创建硬链接 */
    int (*unlink) (struct inode *,struct dentry *); /* 删除硬链接 */
    int (*symlink) (struct inode *,struct dentry *,const char *);
    int (*mkdir) (struct inode *,struct dentry *,umode_t);
    int (*rmdir) (struct inode *,struct dentry *);
    int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
    int (*rename) (struct inode *, struct dentry *,
            struct inode *, struct dentry *);
    void (*truncate) (struct inode *); /*修改inode的size, i_size需要预先修改好*/
    int (*setattr) (struct dentry *, struct iattr *); /*文件属性*/
    int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);
    int (*setxattr) (struct dentry *, const char *,const void *,size_t,int); /*文件扩展属性*/
    ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);
    ssize_t (*listxattr) (struct dentry *, char *, size_t);
    int (*removexattr) (struct dentry *, const char *);
    int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
              u64 len);
    int (*update_time)(struct inode *, struct timespec *, int);
    int (*atomic_open)(struct inode *, struct dentry *,
               struct file *, unsigned open_flag,
               umode_t create_mode, int *opened);
};

1, 硬链接可以理解为一个或多个文件对应VFS里的同一个inode.
	当inode的引用计数被减到0时, 才执行删除(具体文件系统里的)inode的动作.
